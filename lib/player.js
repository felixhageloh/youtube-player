// Generated by CoffeeScript 1.3.3
(function() {
  var callbacks, ytApi;

  callbacks = [];

  ytApi = $('<script>');

  ytApi.attr('src', "//www.youtube.com/iframe_api");

  $('script').parent().append(ytApi);

  this.onYouTubeIframeAPIReady = function() {
    var callback, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      callback = callbacks[_i];
      _results.push(callback());
    }
    return _results;
  };

  this.Player = function(domEl, videoId, options) {
    var api, controls, destroy, init, newYTPlayer, onPlayerStateChange, pauseButton, play, playButton, player, playerEl, playerReady, thumbnailUrl;
    if (options == null) {
      options = {};
    }
    domEl = $(domEl);
    domEl.html("    <div class='yt-player'></div>    <div class='controls'>      <div class='play'></div>      <div class='pause'></div>    </div>  ");
    controls = domEl.find('.controls');
    playerEl = domEl.find('.yt-player');
    playButton = controls.find('.play');
    pauseButton = controls.find('.pause');
    player = null;
    play = false;
    destroy = false;
    api = {};
    init = function() {
      newYTPlayer();
      domEl.css({
        'background-image': "url(" + (thumbnailUrl()) + ")"
      });
      return domEl.css({
        width: options.width,
        height: options.height
      });
    };
    playerReady = function(event) {
      var name, prop;
      player = event.target;
      if (destroy) {
        player.destroy();
        return;
      }
      playerEl = domEl.find('.yt-player');
      for (name in player) {
        prop = player[name];
        api[name] = prop;
      }
      if (play) {
        player.playVideo();
      }
      play = false;
      return typeof callback === "function" ? callback(player) : void 0;
    };
    api.resize = function(width, height) {
      domEl.css({
        width: width,
        height: height
      });
      playerEl.css({
        width: width,
        height: height
      });
      playerEl.attr('width', width).attr('height', height);
      return domEl.blur();
    };
    api.playVideo = function() {
      console.debug('ayay');
      domEl.addClass('buffering');
      return play = true;
    };
    api.pauseVideo = function() {
      domEl.removeClass('buffering');
      return play = false;
    };
    api.destroy = function() {
      return destroy = true;
    };
    newYTPlayer = function() {
      options = $.extend({
        videoId: videoId,
        playerVars: {
          html5: 1,
          modestbranding: 1,
          showinfo: 0,
          wmode: 'transparent',
          controls: 0
        },
        events: {
          'onReady': playerReady,
          'onStateChange': onPlayerStateChange
        }
      }, options);
      return new YT.Player(playerEl[0], options);
    };
    onPlayerStateChange = function(event) {
      if (event.data === YT.PlayerState.PLAYING) {
        domEl.addClass('playing');
        return domEl.removeClass('paused').removeClass('buffering');
      } else if (event.data === YT.PlayerState.BUFFERING) {
        domEl.find('.ythack').remove();
        return domEl.addClass('buffering');
      } else if (event.data === YT.PlayerState.PAUSED) {
        domEl.removeClass('playing').removeClass('buffering');
        return domEl.addClass('paused');
      }
    };
    thumbnailUrl = function() {
      return "http://img.youtube.com/vi/" + videoId + "/0.jpg";
    };
    playButton.on('click', function() {
      return api.playVideo();
    });
    pauseButton.on('click', function() {
      return api.pauseVideo();
    });
    if (typeof YT !== "undefined" && YT !== null) {
      init();
    } else {
      callbacks.push(init);
    }
    return api;
  };

}).call(this);
